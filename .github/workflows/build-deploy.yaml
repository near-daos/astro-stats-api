name: Build & Deploy All
on:
  workflow_dispatch:
    inputs:
      environment:
        required: false
        description: Specify environment to run on. Valid values are development, production
  push:
    branches:
      - develop
    tags:
      - '**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get-environment.outputs.environment }}
      namespace: ${{ steps.get-environment.outputs.namespace }}
      k8s_ingress_host: ${{ steps.get-environment.outputs.k8s_ingress_host }}
      docker_env_tag: ${{ steps.get-environment.outputs.docker_env_tag }}
    steps:
      - name: get environment
        id: get-environment
        shell: bash
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags.* ]]
          then
            echo "::set-output name=environment::production"
            echo "::set-output name=namespace::astro-stats-production"
            echo "::set-output name=k8s_ingress_host::api.astrostats.magicpowered.io"
            echo "::set-output name=docker_env_tag::${GITHUB_REF#refs/*/}"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/develop ]]
          then
            echo "::set-output name=environment::development"
            echo "::set-output name=namespace::ds-d"
            echo "::set-output name=k8s_ingress_host::dev.api.astrostats.magicpowered.io"
            echo "::set-output name=docker_env_tag::develop-$GITHUB_SHA"
          fi
          if [[ "${{ github.event.inputs.environment }}" != "" ]]
          then
            echo "input was provided: ${{ github.event.inputs.environment }}"
            echo "::set-output name=environment::${{ github.event.inputs.environment }}"
            echo "::set-output name=namespace::astro-stats-${{ github.event.inputs.environment }}"
            case "${{ github.event.inputs.environment }}" in
              development)
                echo "::set-output name=k8s_ingress_host::dev.api.astrostats.magicpowered.io"
                echo "::set-output name=docker_env_tag::develop-$GITHUB_SHA"
              ;;
              production)
                echo "::set-output name=k8s_ingress_host::api.astrostats.magicpowered.io"
                echo "::set-output name=docker_env_tag::$GITHUB_SHA"
              ;;
              *)
                echo "Provided environment '${{ github.event.inputs.environment }}' is incorrect"
                exit 1
              ;;
            esac
          fi

  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, aggregator]
    needs:
      - get-environment
    environment:
      name: ${{ needs.get-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Environment
        run: |
          echo DOCKER_ENV_TAG=${{ needs.get-environment.outputs.docker_env_tag }} >> $GITHUB_ENV
          cat ".github/env.common" | grep -E -v '^\ *#' >>$GITHUB_ENV
          cat ".github/env.${{ needs.get-environment.outputs.environment }}" | grep -E -v '^\ *#' >>$GITHUB_ENV
      - name: Docker Build Publish
        env:
          APP_NAME: ${{ matrix.app }}
        uses: ./.github/actions/docker-build-publish

  helm-deploy:
    name: Helm Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        application: [{ name: api }, { name: aggregator }]
    needs:
      - get-environment
      - build-image
    environment:
      name: ${{ needs.get-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Environment
        run: |
          echo DOCKER_ENV_TAG=${{ needs.get-environment.outputs.docker_env_tag }} >> $GITHUB_ENV
          cat ".github/env.common" | grep -E -v '^\ *#' >>$GITHUB_ENV
          cat ".github/env.${{ needs.get-environment.outputs.environment }}" | grep -E -v '^\ *#' >>$GITHUB_ENV
      - name: Helm Deploy
        uses: koslib/helm-eks-action@v1.8.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: |
            set -x

            export CHART_FOLDER=apps/${{ matrix.application.name }}/deployment/app-chart
            helm lint $CHART_FOLDER
            helm -n ${{ needs.get-environment.outputs.namespace }} \
              upgrade --install astro-stats-${{ matrix.application.name }} $CHART_FOLDER \
              --set image.tag=$DOCKER_ENV_TAG \
              --set aggregatorConfig=${{ secrets.AGGREGATOR_CONFIG }} \
              --set ingress.host=${{ needs.get-environment.outputs.k8s_ingress_host }}
